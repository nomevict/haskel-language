# -*- coding: utf-8 -*-
"""CAP2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MCwmKo3HuXxSiuJZvm9yCvSD6M2TIm78

### Você foi designado para desenvolver um programa funcional capaz de processar e manipular grandes conjuntos de dados. O objetivo é criar um sistema que possa lidar com grandes volumes de informações de forma eficiente, aplicando operações de filtragem, mapeamento, redução (fold), ordenação e outras transformações funcionais.
"""
from time import process_time

# Função para realizar a filtragem dos dados
def filtrar_dados(dados2, coluna, valor):
    for dado in dados2:
        if dados2[coluna] == valor:
            dados2.remove(dado)
    return dados2

# Função para realizar o mapeamento dos dados
def mapear_dados(dados, coluna, funcao):
    for i in range(len(dados)):
        dados[i][coluna] = funcao(dados[i][coluna])
    return dados

# Função para realizar a redução dos dados
def reduzir_dados(dados, coluna, funcao):
    resultado = None
    for i in range(len(dados)):
        if resultado is None:
            resultado = dados[i][coluna]
        else:
            resultado = funcao(resultado, dados[i][coluna])
    return resultado

# Função para ordenar os dados
def ordenar_dados(dados, coluna):
    for i in range(len(dados)):
        for j in range(i + 1, len(dados)):
            if dados[i][coluna] > dados[j][coluna]:
                dados[i], dados[j] = dados[j], dados[i]
    return dados

# Função para carregar os dados de um arquivo CSV
def carregar_dados_arquivo(nome_arquivo):
    dados = []
    with open(nome_arquivo, "r") as arquivo:
        for linha in arquivo:
            dados.append(linha.strip().split(","))
    return dados

# Exemplo de uso do código
t5_start = process_time()
dados = carregar_dados_arquivo("dados.csv") # UTILIZE QUALQUER CSV que se adeque com o problema.
t5_stop = process_time()
dados2 = dados.copy()
print(len(dados2))
print(dados2)
# Filtrar os dados com base na coluna "idade"
t1_start = process_time()
dados_filtrados = filtrar_dados(dados2, coluna=1, valor="30")
t1_stop = process_time()
print(len(dados_filtrados))

# Mapear os dados na coluna "salario" com uma função de aumento
t2_start = process_time()
dados_mapeados = mapear_dados(dados_filtrados, coluna=2, funcao=lambda x: float(x) * 1.1)
t2_stop = process_time()
# Reduzir os dados para obter a média dos salários
t3_start = process_time()
media_salarios = reduzir_dados(dados_mapeados, coluna=2, funcao=lambda x, y: x + y) / len(dados_mapeados)
t3_stop = process_time()
# Ordenar os dados pela coluna "nome"
t4_start = process_time()
dados_ordenados = ordenar_dados(dados_mapeados, coluna=0)
t4_stop = process_time()
print("Dados Filtrados:")
print(dados_filtrados)

print("Dados Mapeados:")
print(dados_mapeados)

print("Média dos Salários:")
print(media_salarios)

print("Dados Ordenados:")
print(dados_ordenados)

print("Tempo de execução para carregar os dados: {}".format(t5_stop - t5_start))
print("Tempo de execução para filtrar os dados: {}".format(t1_stop - t1_start))
print("Tempo de execução para mapear os dados: {}".format(t2_stop - t2_start))
print("Tempo de execução para reduzir os dados: {}".format(t3_stop - t3_start))
print("Tempo de execução para ordenar os dados: {}".format(t4_stop - t4_start))

# Pontos a ser levados em consideração:
# 1 - loops imperativos
# 2 - mutabilidade

